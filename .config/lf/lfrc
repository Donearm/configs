# interpreter for shell commands (needs to be POSIX compatible)
set shell sh

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> read-shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# show documentation (overrides 'search-back' command)
map ? $lf -doc | less

# define a custom 'open-file' command
# 'open-file' is called by 'open' when current file is not a directory. You may
# want to use either file extensions and/or mime types here. Below uses an
# editor for text files and a file opener for the rest.
cmd open-file ${{
    case $(file --mime-type $f -b) in
        text/*) vi $fx;;
        *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
    esac
}}

# rename current file without overwrite
cmd rename ${{
    if [ -e $1 ]; then
        lf -remote "send $id echo file exists"
    else
        mv $f $1
    fi
}}
map r push :rename<space>

# show disk usage
cmd usage $du -h . | less

# make sure trash folder exists
$mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash $mv $fx ~/.trash

# remove current file or selected files (prompting)
cmd remove ${{
    printf "$fx\n"
    printf "remove?[y/n]"
    read ans
    [ $ans = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress marked files with tar and gunzip
# This command takes the output name without '.tar.gz' suffix as an argument
# (e.g. 'compress foo' creates 'foo.tar.gz').
cmd compress ${{
    mkdir $1
    cp $fs $1
    tar czvf $1.tar.gz $1
    rm -rf $1
}}
